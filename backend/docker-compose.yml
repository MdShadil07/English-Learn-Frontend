version: '3.8'

services:
  # MongoDB with replica set for scalability
  mongodb:
    image: mongo:7.0
    container_name: english-practice-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-changeme123}
      MONGO_INITDB_DATABASE: english-practice
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    ports:
      - "27017:27017"
    networks:
      - english-practice-network
    command: --replSet rs0 --bind_ip_all --auth
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MongoDB replica set initialization
  mongodb-init:
    image: mongo:7.0
    container_name: english-practice-mongo-init
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./scripts/init-replica-set.js:/init-replica-set.js:ro
    networks:
      - english-practice-network
    command: >
      bash -c "
        sleep 10 &&
        mongosh --host mongodb:27017 -u admin -p changeme123 --eval 'rs.initiate()'
      "

  # Redis for caching and sessions
  redis:
    image: redis:7.2-alpine
    container_name: english-practice-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - english-practice-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main application with multiple replicas
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: english-practice-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:changeme123@mongodb:27017/english-practice?authSource=admin&replicaSet=rs0
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SUPABASE_BUCKET: ${SUPABASE_BUCKET}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb-init:
        condition: service_completed_successfully
    networks:
      - english-practice-network
    deploy:
      replicas: 3  # Scale to 3 replicas for load balancing
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:1.24-alpine
    container_name: english-practice-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # For SSL certificates
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    networks:
      - english-practice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander for cache monitoring (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: english-practice-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - english-practice-network
    profiles:
      - monitoring  # Only start with --profile monitoring

  # Mongo Express for database monitoring (optional)
  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: english-practice-mongo-express
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: changeme123
      ME_CONFIG_MONGODB_URL: mongodb://admin:changeme123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-admin123}
    depends_on:
      - mongodb
    networks:
      - english-practice-network
    profiles:
      - monitoring  # Only start with --profile monitoring

networks:
  english-practice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local
  nginx_cache:
    driver: local

# Production deployment commands:
# docker-compose up -d                    # Start basic stack
# docker-compose --profile monitoring up -d  # Start with monitoring
# docker-compose up -d --scale app=5     # Scale to 5 app replicas
# docker-compose logs -f app             # View app logs
# docker-compose ps                      # Check service status
